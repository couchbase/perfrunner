[test_case]
test = perfrunner.tests.n1ql.N1QLElixirLatencyTest

[showfast]
title = Simple Workload, 20 buckets x 1M x 1KB, 1K queries/sec, 10K KV ops/sec, Plasma
component = cloud
category = n1ql
sub_category = AWS

[cluster]
mem_quota = 12288
index_mem_quota = 12288
initial_nodes = 9
num_buckets = 20
enable_cpu_cores = false

[internal]
magmaMinMemoryQuota = 256

[collection]
config = collections/20buckets_1scope_1collection_basic.json

[bucket]
eviction_policy = fullEviction
backend_storage = magma

[bucket_extras]
num_reader_threads = 64
num_writer_threads = 64

[load]
items = 1000000
size = 1024
workers = 10
doc_gen = unified
num_replies = 100
item_size = 73

[secondary]
indexer.settings.storage_mode = plasma

[index]
replicas = 1
statements =
    CREATE INDEX ix_c0_cid IF NOT EXISTS ON `TARGET_BUCKET`(c0, cid, index_field) WITH {'defer_build': true, 'num_replica': index_replicas};
    CREATE INDEX ix_cid_c0 IF NOT EXISTS ON `TARGET_BUCKET`(cid, c0, index_field) WITH {'defer_build': true, 'num_replica': index_replicas};
    CREATE INDEX ix_apos_ac0_aid IF NOT EXISTS ON `TARGET_BUCKET`(ALL ARRAY FLATTEN_KEYS(v.apos, v.ac0, v.aid) FOR v IN a1 END) WITH {'defer_build': true, 'num_replica': index_replicas};
    CREATE INDEX ix_apos_aid_ac0 IF NOT EXISTS ON `TARGET_BUCKET`(ALL ARRAY FLATTEN_KEYS(v.apos, v.aid, v.ac0) FOR v IN a1 END) WITH {'defer_build': true, 'num_replica': index_replicas};

[access]
creates = 0
reads = 80
updates = 20
deletes = 0
throughput = 500
items = 1000000
workers = 5
doc_gen = unified
num_replies = 100
item_size = 73
time = 600
n1ql_queries = q01,q01,q01,q01,q01,q01,q01,q01,q01,q01,q02,q02,q02,q03,q03,q03,q04,q04,q05,q05
n1ql_workers = 5
n1ql_throughput = 50
workload_instances = 1

[n1ql-q01]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d WHERE d.c0 BETWEEN $1 AND $2 AND d.cid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 10000
qualified_batches = 1

[n1ql-q02]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d WHERE d.c0 BETWEEN $1 AND $2 AND d.cid BETWEEN 0 AND 99 ORDER BY d.c0 DESC LIMIT 20;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 10000
qualified_batches = 1

[n1ql-q03]
statement = SELECT META(l).id, l.index_field, l.xxx, r.yyy FROM `TARGET_BUCKET` AS l JOIN `TARGET_BUCKET` AS r USE HASH(BUILD) ON l.id = r.id WHERE l.c0 BETWEEN $1 AND $2 AND r.c0 BETWEEN $1 AND $2 AND l.cid BETWEEN 0 AND 99 AND r.cid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 10000
qualified_batches = 1

[n1ql-q04]
statement = SELECT g1, COUNT(1) AS cnt FROM `TARGET_BUCKET` AS d WHERE d.c0 BETWEEN $1 AND $2 AND d.cid BETWEEN 0 AND 99 GROUP BY IMOD(d.id,10) AS g1 ORDER BY g1;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 10000
qualified_batches = 1

[n1ql-q05]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d WHERE ANY v IN d.a1 SATISFIES v.ac0 BETWEEN $1 AND $2 AND v.apos = 2 AND v.aid BETWEEN 0 AND 99 END;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 10000
qualified_batches = 1
