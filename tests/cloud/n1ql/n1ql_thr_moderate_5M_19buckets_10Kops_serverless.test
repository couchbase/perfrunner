[test_case]
test = perfrunner.tests.n1ql.N1QLElixirThroughputTest

[showfast]
title = Moderate Workload, 19 buckets x 5M x 1KB, Plasma, serverless
component = n1qlcloud
category = throughput
sub_category = {provider}

[cluster]
initial_nodes = 7
num_buckets = 19
serverless_mode = enabled
data_throttle = 1000000
index_throttle = 1000000
query_throttle = 1000000
enable_n2n_encryption = all

[collection]
scopes_per_bucket = 1
collections_per_scope = 20

[bucket]
replica_number = 2

[load]
items = 5000000
size = 1024
workers = 10
doc_gen = unified
num_replies = 100
item_size = 73
ssl_mode = capella

[index]
replicas = 1
statements =
    CREATE INDEX ix_c0_cid IF NOT EXISTS ON `TARGET_BUCKET`(c0, cid, index_field) WITH {'defer_build': true};
    CREATE INDEX ix_apos_ac0_aid IF NOT EXISTS ON `TARGET_BUCKET`(ALL ARRAY FLATTEN_KEYS(v.apos, v.ac0, v.aid) FOR v IN a1 END) WITH {'defer_build': true};

[access]
creates = 0
reads = 80
updates = 20
deletes = 0
throughput = 600
items = 5000000
workers = 1
doc_gen = unified
num_replies = 100
item_size = 73
time = 600
n1ql_queries = q00,q01,q02,q03,q04,q05,q06,q07,q08,q09
n1ql_query_weight = 0,18,12,10,1,9,5,3,1,1
n1ql_workers = 5
workload_instances = 1
ssl_mode = nebula
nebula_mode = nebula

[n1ql-q00]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d USE INDEX(`#sequentialscan`) WHERE d.c0 BETWEEN $1 AND $2 AND d.cid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q01]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d WHERE d.c0 BETWEEN $1 AND $2 AND d.cid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q02]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d WHERE d.c0 BETWEEN $1 AND $2 AND d.cid BETWEEN 0 AND 99 ORDER BY d.c0 DESC LIMIT 20;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q03]
statement = SELECT META(l).id, l.index_field, l.xxx, r.yyy FROM `TARGET_BUCKET` AS l JOIN `TARGET_BUCKET` AS r USE HASH(BUILD) ON l.id = r.id WHERE l.c0 BETWEEN $1 AND $2 AND r.c0 BETWEEN $1 AND $2 AND l.cid BETWEEN 0 AND 99 AND r.cid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q04]
statement = SELECT g1, COUNT(1) AS cnt FROM `TARGET_BUCKET` AS d WHERE d.c0 BETWEEN $1 AND $2 AND d.cid BETWEEN 0 AND 99 GROUP BY IMOD(d.id,10) AS g1 ORDER BY g1;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q05]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d WHERE ANY v IN d.a1 SATISFIES v.ac0 BETWEEN $1 AND $2 AND v.apos = 2 AND v.aid BETWEEN 0 AND 99 END;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q06]
statement = WITH cte AS (SELECT RAW t FROM `TARGET_BUCKET` AS t WHERE t.c0 BETWEEN $1 AND $2 AND t.cid BETWEEN 0 AND 99) SELECT META(l).id, l.index_field, l.xxx, r.yyy FROM `TARGET_BUCKET` AS l JOIN cte AS r ON l.id = r.id WHERE l.c0 BETWEEN $1 AND $2 AND r.c0 BETWEEN $1 AND $2 AND l.cid BETWEEN 0 AND 99 AND r.cid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q07]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d UNNEST d.a1 AS u WHERE u.ac0 BETWEEN $1 AND $2 AND u.apos = 1 AND u.aid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q08]
statement = UPDATE `TARGET_BUCKET` AS d SET d.comment = d.comment WHERE d.c0 BETWEEN $1 AND $2 AND d.cid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[n1ql-q09]
statement = SELECT META(d).id, d.index_field, d.xxx FROM `TARGET_BUCKET` AS d WHERE d.c0 BETWEEN $1 AND $2 AND `TARGET_SCOPE`.udf(d.c0) = d.c0 AND d.cid BETWEEN 0 AND 99;
scan_consistency = not_bound
args = ["start_qualified_batches"]
total_batches = 2500
qualified_batches = 1

[stats]
server_processes = projector

[clients]
python_client = 3.2.7
