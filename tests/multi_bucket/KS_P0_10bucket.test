[test_case]
test = perfrunner.tests.multibucket.HighBucketDensityTest

[showfast]
title = 10 Bucket test
component = multi_bucket
sub_category = BRQXA

[stats]
server_processes = goxdcr

[cluster]
mem_quota = 23040
index_mem_quota = 40960
fts_index_mem_quota = 40960
analytics_mem_quota = 40960
eventing_mem_quota = 40960
initial_nodes = 8 2
num_buckets = 10
eventing_bucket_mem_quota = 1536
eventing_metadata_bucket_mem_quota = 1024
eventing_buckets = 1

[xdcr_cluster]
sourceNozzlePerNode = 2
targetNozzlePerNode = 2
optimisticReplicationThreshold = 0

[xdcr]
wan_delay = 40

[bucket]
replica_number=1
replica_index=0

[compaction]
db_percentage = 10

[secondary]
indexer.settings.storage_mode = plasma
indexer.numPartitions = 2

[eventing]
functions = perf-test1:tests/eventing/code/bktop.js

[load]
items = 3000000
size = 1024
workers = 10
key_fmtr = hex
doc_gen = multibucket

[access]
creates = 1
items = 3000000
throughput = 1
spring_batch_size = 1
workers = 1
n1ql_queries = range-scan1,range-scan2,range-scan3,range-scan4,range-scan5,range-scan6,range-scan7,range-scan8,range-scan9,range-scan10
n1ql_batch_size = 1
n1ql_workers = 1
n1ql_throughput = 1

[jts]
couchbase_index_configfile = tests/multi_bucket/fts/index/fts_index.json

[index]
statements =
    CREATE INDEX idx11 ON `bucket-1`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx12 ON `bucket-1`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx21 ON `bucket-2`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx22 ON `bucket-2`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx31 ON `bucket-3`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx32 ON `bucket-3`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx41 ON `bucket-4`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx42 ON `bucket-4`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx51 ON `bucket-5`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx52 ON `bucket-5`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx61 ON `bucket-6`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx62 ON `bucket-6`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx71 ON `bucket-7`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx72 ON `bucket-7`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx81 ON `bucket-8`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx82 ON `bucket-8`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx91 ON `bucket-9`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx92 ON `bucket-9`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx101 ON `bucket-10`(alt_email, name) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx102 ON `bucket-10`(alt_email, city) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    BUILD INDEX ON `bucket-1`(idx11, idx12);
    BUILD INDEX ON `bucket-2`(idx21, idx22);
    BUILD INDEX ON `bucket-3`(idx31, idx32);
    BUILD INDEX ON `bucket-4`(idx41, idx42);
    BUILD INDEX ON `bucket-5`(idx51, idx52);
    BUILD INDEX ON `bucket-6`(idx61, idx62);
    BUILD INDEX ON `bucket-7`(idx71, idx72);
    BUILD INDEX ON `bucket-8`(idx81, idx82);
    BUILD INDEX ON `bucket-9`(idx91, idx92);
    BUILD INDEX ON `bucket-10`(idx101, idx102);

[n1ql-range-scan1]
statement = SELECT email, alt_email FROM `bucket-1` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan2]
statement = SELECT email, alt_email FROM `bucket-2` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan3]
statement = SELECT email, alt_email FROM `bucket-3` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan4]
statement = SELECT email, alt_email FROM `bucket-4` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan5]
statement = SELECT email, alt_email FROM `bucket-5` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan6]
statement = SELECT email, alt_email FROM `bucket-6` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan7]
statement = SELECT email, alt_email FROM `bucket-7` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan8]
statement = SELECT email, alt_email FROM `bucket-8` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan9]
statement = SELECT email, alt_email FROM `bucket-9` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[n1ql-range-scan10]
statement = SELECT email, alt_email FROM `bucket-10` WHERE alt_email > 'a0' limit 1;
scan_consistency = not_bounded
args = []

[rebalance]
nodes_after = 9 2
start_after = 600
stop_after = 600
