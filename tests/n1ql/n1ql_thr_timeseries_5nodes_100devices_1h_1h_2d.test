[test_case]
test = perfrunner.tests.n1ql.N1QLTimeSeriesThroughputTest

[showfast]
title = Timeseries, 1 bucket x 90K x 1KB, 100 devices, 1 hour data points per doc, 1 hour data of 2 devices
component = n1ql

[cluster]
mem_quota = 32768
index_mem_quota = 1024
initial_nodes = 5
num_buckets = 1
enable_cpu_cores = false

[bucket]
eviction_policy = fullEviction
backend_storage = magma

[bucket_extras]
num_reader_threads = 64
num_writer_threads = 64

[secondary]
indexer.settings.storage_mode = plasma
indexer.settings.max_cpu_percent = 4800

[load]
items = 216000
size = 1024
workers = 100
doc_gen = time_series
timeseries_start = 1672531200000
timeseries_hours_per_doc = 1
timeseries_docs_per_device = 2160
timeseries_total_days = 90

[index]
statements =
    create index ix1 on `bucket-1`(device, ts_end, ts_start) partition by hash (device);

[access]
creates = 0
reads = 0
updates = 0
deletes = 0
throughput = 0
items = 216000
workers = 0
time = 1200
n1ql_queries = timeseries
n1ql_workers = 100
workload_instances = 1
timeseries_start = 1672531200000
timeseries_hours_per_doc = 1
timeseries_docs_per_device = 2160
timeseries_total_days = 90

[n1ql-timeseries]
statement = SELECT d.device,t._t,t._v0 FROM `bucket-1` AS d UNNEST _timeseries(d, {"ts_ranges":$1, "ts_project":0}) AS t WHERE d.device BETWEEN $2 and $3 AND (d.ts_start <= $5 AND d.ts_end >= $4);
scan_consistency = not_bound
args = ["timeseries"]
ts_config = {'total_devices': 100, 'device_range': 1, 'total_ts_range': 2160, 'ts_range': 1, 'ts_start': 1672531200000}
