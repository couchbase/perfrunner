[test_case]
test = perfrunner.tests.n1ql.N1QLDGMLatencyTest

[showfast]
title = PI1, Aggregation query (1M matches), 2B docs, Plasma, not_bounded
component = n1ql
category = partitioned

[stats]
server_processes = projector

[cluster]
mem_quota = 204800
index_mem_quota = 102400
initial_nodes = 10
num_buckets = 1
kernel_mem_limit = 130G

[bucket]
replica_number = 0

[secondary]
indexer.settings.storage_mode = plasma
indexer.numPartitions = 4

[n1ql]
max-parallelism = 4

[load]
key_fmtr = hex
doc_gen = package
workers = 100
items = 2000000000

[index]
statements =
    CREATE INDEX idx1 ON `bucket-1`(bcdnNumber, packageStatus, shippingDate) PARTITION BY HASH(bcdnNumber) WITH {"defer_build": true};
    CREATE INDEX idx2 ON `bucket-1`(minorAccountId, packageStatus, charges) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx3 ON `bucket-1`(minorAccountId, address, weight) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    CREATE INDEX idx4 ON `bucket-1`(shippingDate, minorAccountId, postalCode) PARTITION BY HASH(META().id) WITH {"defer_build": true};
    BUILD  INDEX ON `bucket-1`(idx1, idx2, idx3, idx4);

[access]
creates = 0
reads = 0
updates = 100
deletes = 0
items = 2000000000
workers = 2
throughput = 2500
power_alpha = 10
n1ql_queries = aggregation
n1ql_batch_size = 1
n1ql_workers = 8
time = 7200

[n1ql-aggregation]
statement = SELECT packageStatus, SUM(charges) AS totalCharges FROM `bucket-1` WHERE minorAccountId = $1 GROUP BY packageStatus;
scan_consistency = not_bounded
args = ["{minorAccountId}"]
